searchState.loadedDescShard("github_readme_copy", 0, "github_readme_copy\nApplication state (static) is initialized only once in the …\nAll possible library errors for <code>thiserror</code>.\ndownload public readmes\nReturns the argument unchanged.\nReturns the argument unchanged.\nStart the github oauth2 device workflow It will use the …\ncreate bash script for backup of all GitHub repositories\nAll the real code is inside modules in separate files.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ndownload substack articles from …\nAll the real code is inside modules in separate files.\n<code>ToString::to_string</code>, but without panic on OOM.\nvarious utilities\nANSI color\nANSI color\nANSI color\nANSI color\nANSI color\nGeneric functions to encrypt and decrypt secrets using the …\ndecrypt github api token from file or use the oauth2 …\nStruct that represents the json data saved in the ‘*.enc…\nDecode base64 from string to 32bytes.\nDecode base64 from string to string.\nDecrypts plain_encrypted_string with …\nDecode base64 from string to 32bytes.\nEncode base64 from bytes to string.\nEncode base64 from string to string.\nEncrypts symmetrically secret_string_to_encrypt with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet reference to bare file name.\nGet reference to full file path.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEncrypted file path: tilde string and PathBuf.\nPrivate key file path: tilde string and PathBuf.\nPublic key file path: tilde string and PathBuf.\nGet the string from the file that is base64 encoded.\nGenerate a random seed.\nShorten the <code>Vec&lt;u8&gt; to [u8;32]</code>.\nSign the seed with the private key into 32 bytes secret.\nSign seed with ssh-agent into 32 bytes secret.\nReturns the secret signed seed.\nReplace tilde with home::home_dir, only for utf8.\n<code>ToString::to_string</code>, but without panic on OOM.\nApplication state (static) is initialized only once in the …\nOauth2 device workflow needs to be authenticated with a …\ndecrypt text with metadata\nencrypt and save file\nReturns the argument unchanged.\nStart the github oauth2 device workflow It will use the …\nCalls <code>U::from(self)</code>.\nuse refresh token to get new access_token and refresh_token\nUpload to GitHub\ndownload public readmes\nget the right readme body if there is a link to &gt;Primary …\ncreate bash script for backup of all GitHub repositories\nif exists data-canonical-src then replace src\nremove element svg class=“octicon octicon-link”&gt;\nprivate and public repos\nonly public repos\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nremove &lt;div class=“post-footer…\nremove  &lt;div role=“dialog”\ndownload substack articles from …\nlist urls from all articles from /api/v1/archive\nfind from_pos\nreturn the position of end of the delimited data before …\nreturn the position of start of the delimited data after …")